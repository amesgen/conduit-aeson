name: CI

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]

defaults: { run: { shell: bash } }



jobs:
  test-with-stack:
    name: Test with Stack
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        resolver: [lts-12, lts-14, lts-16, lts-18, nightly]
        include:
          - resolver: lts-12
            ghc: 8.4.4
            # stack-yaml: stack-extra-deps.yaml
          - resolver: lts-14
            ghc: 8.6.5
            stack-yaml: stack-coveralls.yaml
          - resolver: lts-16
            ghc: 8.8.4
            # stack-yaml: stack-extra-deps.yaml
          - resolver: lts-18
            ghc: 8.10.7
          - resolver: nightly # reports a problem with happy?!
            ghc: 9.0.1
        # exclude:
        #   - resolver: lts-18
        #     os: windows-latest # Too buggy, occasional ghc crashes

    env:
      STACK_YAML: stack.yaml
      STACK_ARGS: '--resolver ${{ matrix.resolver }} --system-ghc'
      cache-version: v7 # bump up this version to invalidate currently stored cache
    steps:
    - uses: actions/checkout@v2
    - uses: haskell/actions/setup@v1
      id: setup-haskell-cabal
      name: Setup Haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        enable-stack: true
        stack-version: 'latest'
        cabal-version: '3.6'

    - name: Cache
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          ${{ steps.setup-haskell-cabal.outputs.stack-root }}
          .stack-work
        key: ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
    - name: Windows Cache
      id: cache-windows
      uses: actions/cache@v2
      if: matrix.os == 'windows-latest'
      with:
        path: |
          C:\\Users\\RUNNER~1\\AppData\\Roaming\\stack
          C:\\Users\\RUNNER~1\\AppData\\Local\\Programs\\stack
        key: ${{ runner.os }}-${{ matrix.resolver }}-programs-${{ env.cache-version }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.resolver }}-programs-${{ env.cache-version }}
      # - name: Install happy # https://github.com/commercialhaskell/stackage/issues/6252
      #   if: matrix.resolver == 'nightly'
      #   run: |
      #     set -ex
      #     cabal update
      #     cabal install happy -f -bootstrap
    - name: Build
      env:
        COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      run: |
        set -ex
        echo "STACK_ROOT: ${{ steps.setup-haskell-cabal.outputs.stack-root }}"
        [ -n "${{ matrix.stack-yaml }}" ] && STACK_YAML=${{ matrix.stack-yaml }}
        curl -sSL https://raw.githubusercontent.com/lehins/utils/5d9b17f2f084ce54978dbd71974970483063a540/haskell/git-modtime/git-modtime.hs -o git-modtime.hs
        mkdir -p .stack-work
        # Windows is confused about stack's default user directory
        stack $STACK_ARGS runghc -- git-modtime.hs -f .stack-work/tree-contents.txt
        if [ "${{ matrix.os }}.${{ matrix.resolver }}" == "ubuntu-latest.lts-14" ] && [ -n "${COVERALLS_TOKEN}" ]; then
          stack $STACK_ARGS build :tests --coverage --test --no-run-tests --haddock --no-haddock-deps
        else
          stack $STACK_ARGS build --test --no-run-tests --haddock --no-haddock-deps
        fi
    - name: Test
      env:
        COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      run: |
        set -ex
        [ -n "${{ matrix.stack-yaml }}" ] && STACK_YAML=${{ matrix.stack-yaml }}
        if [ "${{ matrix.os }}.${{ matrix.resolver }}" == "ubuntu-latest.lts-14" ] && [ -n "${COVERALLS_TOKEN}" ]; then
          stack $STACK_ARGS test :tests --coverage --haddock --no-haddock-deps
          stack $STACK_ARGS hpc report --all
          curl -L https://github.com/rubik/stack-hpc-coveralls/releases/download/v0.0.6.1/shc-linux-x64-8.8.4.tar.bz2 | tar xj shc
          ./shc --repo-token="$COVERALLS_TOKEN" --partial-coverage --fetch-coverage combined custom
        else
          stack $STACK_ARGS test :doctests
          stack $STACK_ARGS test :tests
        fi

  test-with-cabal:
    name: Test with Cabal
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { cabal: "3.4", os: ubuntu-latest, ghc: "7.10.3" }
          - { cabal: "3.6", os: ubuntu-latest, ghc: "8.0.2" }
          - { cabal: "3.6", os: ubuntu-latest, ghc: "8.2.2" }
          - { cabal: "3.6", os: ubuntu-latest, ghc: "9.0.1" }
          - { cabal: "3.6", os: ubuntu-latest, ghc: "9.2.1" }
          - { cabal: "3.6", os: windows-latest, ghc: "8.0.2" } # OOM on tests
          - { cabal: "3.6", os: windows-latest, ghc: "8.2.2" }
          - { cabal: "3.6", os: windows-latest, ghc: "9.0.1" } # OOM on tests
          - { cabal: "3.6", os: windows-latest, ghc: "9.2.1" }
          - { cabal: "3.6", os: macOS-latest, ghc: "8.0.2" }
          - { cabal: "3.6", os: macOS-latest, ghc: "8.2.2" }
          - { cabal: "3.6", os: macOS-latest, ghc: "9.0.1" }
          - { cabal: "3.6", os: macOS-latest, ghc: "9.2.1" }

    env:
      cache-version: v2 # bump up this version to invalidate currently stored cache
    steps:
    - uses: actions/checkout@v2
    - uses: haskell/actions/setup@v1
      id: setup-haskell-cabal
      name: Setup Haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}

    - name: Cache Cabal Store
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          dist-newstyle
        key: cabal-${{ runner.os }}-${{ matrix.ghc }}-${{ env.cache-version }}
        restore-keys: |
          cabal-${{ runner.os }}-${{ matrix.ghc }}-${{ env.cache-version }}
    - name: Build
      run: |
        set -ex
        cabal configure --haddock-all --enable-tests
        cabal build all --write-ghc-environment-files=always
    - name: Test
      run: |
        set -ex
        cabal test all
    - name: Check Cabal Files
      run: |
        set -ex
        cabal -vnormal check
